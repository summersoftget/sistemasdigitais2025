-- Essa foi a versão em que o signal deu um supsoto problema e estava pulando o estado s3 e retornando para s0.


library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity seq_rec_moore_de10 is
    port (
        SW       : in std_logic_vector(0 downto 0);  -- x = SW[0]
        KEY      : in std_logic_vector(1 downto 0);  -- KEY[0] = clock, KEY[1] = reset
        LEDR     : out std_logic_vector(3 downto 0); -- mostra o estado
        HEX0     : out std_logic_vector(6 downto 0)  -- display de 7 segmentos
    );
end entity;

architecture behavior of seq_rec_moore_de10 is
    type state_type is (S0, S1, S2, S3, S4);
    signal current_state, next_state: state_type;
begin

    -- Processo de clock e reset
    process (KEY(0), KEY(1))
    begin
        if KEY(1) = '0' then -- reset síncrono
            current_state <= S0;
        elsif rising_edge(KEY(0)) then
            current_state <= next_state;
        end if;
    end process;

    -- Processo de transição de estados
    process (current_state, SW)
    begin
        case current_state is
            when S0 =>
                if SW(0) = '1' then
                    next_state <= S1;
                else
                    next_state <= S0;
                end if;

            when S1 =>
                if SW(0) = '1' then
                    next_state <= S2;
                else
                    next_state <= S0;
                end if;

            when S2 =>
                if SW(0) = '1' then
                    next_state <= S2;
                else
                    next_state <= S3;
                end if;

            when S3 =>
                if SW(0) = '1' then
                    next_state <= S4;
                else
                    next_state <= S0;
                end if;

            when S4 =>
                if SW(0) = '1' then
                    next_state <= S2;
                else
                    next_state <= S0;
                end if;
        end case;
    end process;

    -- LEDR
    with current_state select
        LEDR <= "0000" when S0,  -- Estado 0
                "0001" when S1,  -- Estado A
                "0011" when S2,  -- Estado B
                "0100" when S3,  -- Estado C
                "0101" when S4;  -- Estado D

    -- HEX0
    with current_state select
        HEX0 <= "1000000" when S0,    -- Número 0
                "0001000" when S1,    -- Letra A
                "0000011" when S2,    -- Letra B
                "1000110" when S3,    -- Letra C
                "0100001" when S4,    -- Letra D
                "1111111" when others; -- Apagado

end architecture;
