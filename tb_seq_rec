library ieee;
use ieee.std_logic_1164.all;
use work.seq_pkg.all;

entity tb_seq_rec is
end entity;

architecture behavior of tb_seq_rec is
    signal SW_tb   : std_logic_vector(0 downto 0) := (others => '0');
    signal KEY_tb  : std_logic_vector(1 downto 0) := (others => '1');
    signal LEDR_tb : std_logic_vector(3 downto 0);
    signal HEX0_tb : std_logic_vector(6 downto 0);
    signal state_dbg : state_type;

    constant clk_period : time := 10 ns;
begin
    uut: entity work.seq_rec_moore_de10
        port map (
            SW   => SW_tb,
            KEY  => KEY_tb,
            LEDR => LEDR_tb,
            HEX0 => HEX0_tb,
            current_state_out => state_dbg
        );

    -- Geração de clock
    clk_process: process
    begin
        while true loop
            KEY_tb(0) <= '0';
            wait for clk_period/2;
            KEY_tb(0) <= '1';
            wait for clk_period/2;
        end loop;
    end process;

    -- Estímulos
    stim_proc: process
    begin
        -- Reset
        KEY_tb(1) <= '0';
        wait for clk_period;
        KEY_tb(1) <= '1';
        wait for clk_period;

        -- Sequência 1 1 0 1
        SW_tb(0) <= '1'; wait for clk_period;
        SW_tb(0) <= '1'; wait for clk_period;
        SW_tb(0) <= '0'; wait for clk_period;
        SW_tb(0) <= '1'; wait for clk_period;

        -- Outra sequência
        SW_tb(0) <= '0'; wait for clk_period;
        SW_tb(0) <= '1'; wait for clk_period;
        SW_tb(0) <= '1'; wait for clk_period;
        SW_tb(0) <= '0'; wait for clk_period;
        SW_tb(0) <= '1'; wait for clk_period;

        -- Espera e encerra
        wait for 50 ns;
        std.env.stop;
    end process;
end architecture;

